@model Application.DTOs.User.UserRequestDTO

@{
    ViewData["Title"] = "Login";
    Layout = "_LoginLayout";
    
    var logoutAlert = TempData["LogoutAlert"] == null ? "" : TempData["LogoutAlert"]!.ToString();
}

<style>
    .captcha-container {
        background-color: #db4b73;
        padding: 10px;
        border-radius: 5px;
        transform: rotate(-2deg);
        display: inline-block;
    }

    .captcha-text {
        color: white;
        font-size: 20px;
        font-weight: bold;
        transform: rotate(2deg);
    }
    
    .refresh-btn {
        margin-left: 10px;
        cursor: pointer;
    }
    
    .protected {
        -moz-user-select:none;
        -webkit-user-select:none;
        user-select:none;
    }
</style>

<partial name="_Notification"/>

<div class="row section">
    <form method="post" asp-controller="Home" asp-action="Login" autocomplete="off">
        @Html.AntiForgeryToken()
        <h2 class="text-danger poppins-semibold">Login</h2>
            <p class="poppins-regular mb-2" style="color: #4E4E4E;">Enter your username & password</p>
            <p class="poppins-light mb-1">User Name</p>
            <div class="input-group mb-3">
                <span style="background-color: #db4b73; width: 0.7vw; border-radius: 3px;"></span>
                <div class="form-floating position-relative">
                    <img src="~/images/user.png" alt="" style="position: absolute; top: 50%; left: 10px; transform: translateY(-50%); width: 1.7vw">
                    @Html.TextBoxFor(m => m.UserName, new { @class = "form-control ps-5", placeholder = "", id = "UserName", autocomplete = "off" })
                    <label class="ms-4 ps-4">Type Here ...</label>
                </div>
            </div>
            <p class="poppins-light mb-1">Password</p>
            <img src="images/people.png" alt="" style="z-index: -3; position: absolute; margin-top: 16px; margin-left: 6vw;">
            <div class="input-group mb-3">
                <span style="background-color: #db4b73; width: 0.7vw; border-radius: 3px;"></span>
                <div class="form-floating position-relative">
                    <span>
                        <img src="images/password.png" alt="" style="position: absolute; top: 50%; left: 10px; transform: translateY(-50%); width: 1.7vw">
                    </span>
                    @Html.TextBoxFor(m => m.Password, new { @class = "form-control ps-5", placeholder = "", id = "Password", type = "password", autocomplete = "off" })
                    <label class="ms-4 ps-4">Type Here ...</label>
                </div>
            </div>
            <p class="text-end m-0 p-0">
                <input type="checkbox" onclick="togglePassword()">
                Show Password
            </p>
            <div class="captcha-container mb-2">
                <span class="captcha-text protected" id="captcha-value">@ViewData["Captcha"]</span>
                <span class="refresh-btn text-white" id="refreshCaptcha">&#8635;</span>
            </div>
            <div class="input-group mb-3">
                <span style="background-color: #db4b73; width: 0.7vw; border-radius: 3px;"></span>
                <div class="form-floating position-relative">
                    <img src="images/password.png" alt="" style="position: absolute; top: 50%; left: 10px; transform: translateY(-50%); width: 1.7vw">
                    @Html.TextBoxFor(m => m.Captcha, new { @class = "form-control ps-5", placeholder = "", id = "Captcha", autocomplete = "off" })
                    <label class="ms-4 ps-4">Type Here ...</label>
                </div>
            </div>
            <div class="row">
                <input asp-for="HdCp" class="form-control ps-5" id="HdCp" type="hidden" />
                <input asp-for="HdUserName" class="form-control ps-5" id="HdUserName" type="hidden" />
                <input asp-for="HdPassword" class="form-control ps-5" id="HdPassword" type="hidden" />
            </div>
            <div class="mt-3 pt-5 mb-2 itemCenter">
                <button class="btn-block loginButtonSize" type="submit" style="background-color: #393185; color: white" id="login">
                   Login
                </button>
            </div>
    </form>
</div>

<script type="text/javascript">
    function togglePassword() {
        let passwordField = document.getElementById("Password");
        if (passwordField.type === "password") {
            passwordField.type = "text";
        } else {
            passwordField.type = "password";
        }
    }
    
    document.addEventListener("DOMContentLoaded", function () {
        $(document).keydown(function(event){
            if(event.keyCode === 123){
                return false;
            }
            else if(event.ctrlKey && event.shiftKey && event.keyCode === 73){        
                return false;  
            }
        });
        
        $(document).on("contextmenu",function(e){        
           e.preventDefault();
        });
        
        let loginButton = document.getElementById('login');

        loginButton.addEventListener('click', function (event) {
            let txtUserName = $('#UserName').val();
            let txtPassword = $('#Password').val();
            
            let salt = Date.now().toString(36) + Math.random().toString(36).substr(2);
            
            $('#HdCp').val(salt);
            
            if (txtUserName === '' || txtPassword === '') {
                return;
            }
            
            let key = CryptoJS.enc.Utf8.parse('8080808080808080');
            let iv = CryptoJS.enc.Utf8.parse('8080808080808080');
            
            let encryptedLogin = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(txtUserName), key,
            {
                keySize: 128 / 8,
                iv: iv,
                mode: CryptoJS.mode.CBC,
                padding: CryptoJS.pad.Pkcs7
            });
            
            $('#HdUserName').val(encryptedLogin);
            $('#UserName').val("********************");
            
            let encryptedPassword = CryptoJS.AES.encrypt(CryptoJS.enc.Utf8.parse(txtPassword + salt), key,
            {
                keySize: 128 / 8,
                iv: iv,
                mode: CryptoJS.mode.CBC,
                padding: CryptoJS.pad.Pkcs7
            });
        
            $('#HdPassword').val(encryptedPassword);
            $('#Password').val("********************");
        });
        
        if ('@logoutAlert' !== '') {
            $("#logout-alert-modal").modal("show");
        }
        
        $('#refreshCaptcha').on('click', function() {
            $.ajax({
                url: '/Home/RefreshCaptcha/', 
                type: 'GET',
                success: function(data) {
                    $('#captcha-value').text(data.text);
                },
                error: function(xhr, status, error) {
                    console.error(error);
                }
            });
        });
    });
    
</script>
